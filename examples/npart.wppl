var skill_prior     = [0.01, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.99];
var skill_prior_pmf = [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00];

var decision_prior     = [0.000, 10.000];
var decision_prior_pmf = [0.250,  0.750];

var categorical = function(v,p) {return v[discrete(p)];}

var get_bet_erp = function(num, win)
{
    var bet_erp = Enumerate(function()
        {
            var test_skill = categorical(skill_prior, skill_prior_pmf);
            var test_decision = categorical(decision_prior, decision_prior_pmf);

            factor((binomial(test_skill, num) == win) ? 0 : -Infinity);

            return flip(Math.exp(test_decision*test_skill)/
                        (Math.exp(test_decision*test_skill) + Math.exp(test_decision*(1-test_skill))));
        });

    return bet_erp;
};

var make_observant_learner_erp = function(params) 
{
    var t_num = params[0];
    var t_bet = params[1];
    var l_num = params[2];
    var l_win = params[3];

    var observant_learner_erp = Enumerate(function()
        {
            var t_bet_tf = (t_bet == 1);
            var test_skill = categorical(skill_prior, skill_prior_pmf);
            var t_win = binomial(test_skill, t_num);
            var test_bet = sample(get_bet_erp(t_num, t_win))
            factor(((binomial(test_skill, l_num) == l_win) && 
                    (test_bet == t_bet_tf)) ? 0 : -Infinity);
            return test_skill;
        });
    
    return observant_learner_erp;
};

var make_arrogant_learner_erp = function(params) 
{
    var t_num = params[0];
    var t_bet = params[1];
    var l_num = params[2];
    var l_win = params[3];

    var arrogant_learner_erp = Enumerate(function()
        {
            var test_skill = categorical(skill_prior, skill_prior_pmf);
            factor((binomial(test_skill, l_num) == l_win) ? 0 : -Infinity);
            return test_skill;
        });
    
    return arrogant_learner_erp;
};

var make_deferrent_learner_erp = function(params) 
{
    var t_num = params[0];
    var t_bet = params[1];
    var l_num = params[2];
    var l_win = params[3];

    var deferrent_learner_erp = Enumerate(function()
        {
            var t_bet_tf = (t_bet == 1);
            var test_skill = categorical(skill_prior, skill_prior_pmf);
            var t_win = binomial(test_skill, t_num);
            var test_bet = sample(get_bet_erp(t_num, t_win));
            factor((test_bet == t_bet_tf) ? 0 : -Infinity);
            return test_skill;
        });
    
    return deferrent_learner_erp;
};

//make_observant_learner_erp(30,1,5,0);
//make_arrogant_learner_erp(5,1,5,0);
//make_deferrent_learner_erp(30,1,5,0);
//get_bet_erp(30,1);
//make_categoricalERP(skill_prior, skill_prior_pmf);
//make_categoricalERP(decision_prior, decision_prior_pmf);

//var params = [30,1,5,0];
//var m1 = make_observant_learner_erp(params);
//var m2 = make_arrogant_learner_erp(params);
//var m3 = make_deferrent_learner_erp(params);

//oed.get_expected_kl([m1, m2, m3], [0.5, 0.5, 0.5])
/*
var pmf = oed.erp_to_pmf([m1, m2, m3]);
var xx = oed.get_participants_sampler(pmf, 2, 20);
console.log(xx)
oed.get_h_response_g_model(pmf, [1/3, 1/3, 1/3], xx, 2, 20);
var dd = oed.get_h_response(pmf, [1/3, 1/3, 1/3], xx, 2, 20);
console.log(dd)
*/
//oed.get_expected_kl_participants_sample([m1, m2, m3], [1, 1, 1], 1, 5000)

var params = [30,1,5,0];
var m1 = make_observant_learner_erp(params);
var m2 = make_arrogant_learner_erp(params);
var m3 = make_deferrent_learner_erp(params);
//console.log(oed.erp_to_pmf([m3])[0].to_x_list())
//console.log(oed.erp_to_pmf([m3])[0].to_p_list())
//console.log('    ', oed.erp_to_pmf([m1])[0].to_p_list())
//console.log('    ', oed.erp_to_pmf([m2])[0].to_p_list())
//console.log('    ', oed.erp_to_pmf([m3])[0].to_p_list())
var inputs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
oed.print(inputs, map(function(x) {
                        //var params = [30,1,5,0];
                        //var m1 = make_observant_learner_erp(params);
                        //var m2 = make_arrogant_learner_erp(params);
                        //var m3 = make_deferrent_learner_erp(params);
                        //console.log('    ', x)
                        //console.log('    ', oed.erp_to_pmf([m1])[0].to_p_list())
                        //console.log('    ', oed.erp_to_pmf([m2])[0].to_p_list())
                        //console.log('    ', oed.erp_to_pmf([m3])[0].to_p_list())
                        return oed.get_expected_kl_participants_sample([m1, m2, m3], [1/3, 1/3, 1/3], x, 5000);}, inputs))

/*
var inputs = ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', 
              '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111']
oed.print(inputs, map(function(x) {
                        var sequence = x;
                        var particles = 5000;
                        var m1 = Enumerate(make_iid_coin(sequence, particles));
                        var m2 = Enumerate(make_markov_coin(sequence, particles));
                        return oed.get_expected_kl([m1, m2], [0.5, 0.5]);}, inputs), true)
*/
/*
var sequence = '0000';
var particles = 5000;
var m1 = Enumerate(make_iid_coin(sequence, particles));
var m2 = Enumerate(make_markov_coin(sequence, particles));
//oed.get_expected_kl([m1, m2], [0.5, 0.5])
var pmf = oed.erp_to_pmf([m1, m2])
oed.get_participants_sampler(pmf, 10, 100)
*/

