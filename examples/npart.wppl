// Categorical priors
var skill_prior     = [0.01, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.99];
var skill_prior_pmf = [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00];

var decision_prior     = [0.000, 10.000];
var decision_prior_pmf = [0.250,  0.750];

var categorical = function(v,p) {return v[discrete(p)];}

// Bettor's decision making model
var get_bet_erp = function(num, win) {
  var bet_erp = Enumerate(function() {
    var test_skill = categorical(skill_prior, skill_prior_pmf);
    var test_decision = categorical(decision_prior, decision_prior_pmf);

    factor((binomial(test_skill, num) == win) ? 0 : -Infinity);

    return flip(Math.exp(test_decision*test_skill)/
                (Math.exp(test_decision*test_skill) + Math.exp(test_decision*(1-test_skill))));
  });

  return bet_erp;
};

// Arrogant reasoner model
var make_arrogant_reasoner_erp = function(params) {
  var l_num = params[0]; var l_win = params[1];
  var t_num = params[2]; var t_bet = params[3]; 

  var arrogant_reasoner_erp = Enumerate(function() {
    var test_skill = categorical(skill_prior, skill_prior_pmf);
    factor((binomial(test_skill, l_num) == l_win) ? 0 : -Infinity);
    return test_skill;
  });
  
  return arrogant_reasoner_erp;
};

// Deferent reasoner model
var make_deferent_reasoner_erp = function(params) {
  var l_num = params[0]; var l_win = params[1];
  var t_num = params[2]; var t_bet = params[3]; 

  var deferent_reasoner_erp = Enumerate(function()
  {
    var t_bet_tf = (t_bet == 1);
    var test_skill = categorical(skill_prior, skill_prior_pmf);
    var t_win = binomial(test_skill, t_num);
    var test_bet = sample(get_bet_erp(t_num, t_win));
    factor((test_bet == t_bet_tf) ? 0 : -Infinity);
    return test_skill;
  });
  
  return deferent_reasoner_erp;
};

// Observant reasoner model
var make_observant_reasoner_erp = function(params) {
  var l_num = params[0]; var l_win = params[1];
  var t_num = params[2]; var t_bet = params[3]; 

  var observant_reasoner_erp = Enumerate(function() {
    var t_bet_tf = (t_bet == 1);
    var test_skill = categorical(skill_prior, skill_prior_pmf);
    var t_win = binomial(test_skill, t_num);
    var test_bet = sample(get_bet_erp(t_num, t_win))
    factor(((binomial(test_skill, l_num) == l_win) && 
            (test_bet == t_bet_tf)) ? 0 : -Infinity);
    return test_skill;
  });
  
  return observant_reasoner_erp;
};

// List of experiment parameters and number of participants
var data = oed.make_data("npart", "");
var expt_list = [[5,0,30,1], [5,1,30,1]];
var npart = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];

map(function(expt){
      var params = expt;
      var m1 = make_observant_reasoner_erp(params);
      var m2 = make_arrogant_reasoner_erp(params);
      var m3 = make_deferent_reasoner_erp(params);

      map(function(n) {
          data.concat(oed.format([params], 
                                 [oed.get_expected_kl_participants_sample([m1,m2,m3], 
                                                                          [1/3,1/3,1/3], 
                                                                          n, 5000)],
                                 false, n))}, npart);
    }, expt_list)

console.log(data)
//oed_print_kl_participants([data, "Number of participants", "Information Gain"])
